//
//  ResourceManager.m
//  PAFF
//
//  Created by 班磊 on 15/3/27.
//  Copyright (c) 2015年 Tiger. All rights reserved.
//

/**
 *  压缩包
 */
#define PAFF_TmpZipDirName @"TestSource"
/**
 *  解压的文件夹
 */
#define PAFF_DocFileDirName @"TestSource"

#import "ResourceManager.h"

@implementation ResourceManager

//创建文件目录
+ (void) createFileDirectory: (NSString *)directoryName
{
    NSString *path = NSTemporaryDirectory();
    NSString *testDirectory = [path stringByAppendingPathComponent: directoryName];
    NSFileManager *fileManager = [NSFileManager defaultManager];
    
    if (![fileManager fileExistsAtPath:testDirectory])
    {
        [fileManager createDirectoryAtPath:testDirectory withIntermediateDirectories:YES attributes:nil error:nil];
    }
}

//判断该路径是否存在
+ (BOOL) isJudgeEixtPaht: (NSString *)pathName
{
    NSFileManager *fileManager = [NSFileManager defaultManager];
    return [fileManager fileExistsAtPath: pathName];
}

//获取所有文件的路径
+ (void) getAllFilePath: (NSString *)directoryName
{
    NSArray *paths = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *path2 = [paths objectAtIndex:0];
    NSString *testDirectory2 = [path2 stringByAppendingPathComponent: directoryName];
    NSFileManager *getFileManager = [NSFileManager defaultManager];
    NSArray *filesArray = [getFileManager contentsOfDirectoryAtPath: testDirectory2 error: nil];
    
    for (NSString *filePath in filesArray)
    {
        NSLog(@"path == %@",filePath);
    }
}

+ (void)removeTmpDirectory
{
    NSString *tmpPath = NSTemporaryDirectory();
    
    NSString *filePath = [tmpPath stringByAppendingPathComponent:PAFF_TmpZipDirName];
    NSFileManager *manager = [NSFileManager defaultManager];
    if ([manager fileExistsAtPath:filePath]) {
        [manager removeItemAtPath:filePath error:nil];
    }
}

+ (void) removeTmpDirectoryWithFileName:(NSString*) fileName
{
    NSString *path = NSTemporaryDirectory();
    NSString *filePath = [path stringByAppendingPathComponent:PAFF_TmpZipDirName];
    filePath = [filePath stringByAppendingFormat:@"/%@",fileName];
    NSFileManager *manager = [NSFileManager defaultManager];
    if ([manager fileExistsAtPath:filePath]) {
        [manager removeItemAtPath:filePath error:nil];
    }

}

//获取temp目录下的fileName路径
+ (NSString *)getTmpDirectory:(NSString *)fileName{
    NSString *tmpPath = NSTemporaryDirectory();
    
    NSString *filePath = [tmpPath stringByAppendingPathComponent:PAFF_TmpZipDirName];
    NSFileManager *manager = [NSFileManager defaultManager];
    if (![manager fileExistsAtPath:filePath]) {
        [manager createDirectoryAtPath:filePath withIntermediateDirectories:YES attributes:nil error:nil];
    }
    
    return [filePath stringByAppendingPathComponent:fileName];
}

//获取doc目录下的fileName路径
+ (NSString *)getDocDirectory:(NSString *)fileName{
    NSArray *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docPath = [path objectAtIndex:0];
    
    NSString *filePath = [docPath stringByAppendingPathComponent:PAFF_DocFileDirName];
    NSFileManager *manager = [NSFileManager defaultManager];
    if (![manager fileExistsAtPath:filePath]) {
        [manager createDirectoryAtPath:filePath withIntermediateDirectories:YES attributes:nil error:nil];
    }
    return [filePath stringByAppendingPathComponent:fileName];
}

//获取doc目录下 自定义的fileName路径
+ (NSString *)getDocDirectoryCustomPath:(NSString *)folder fileName:(NSString *)fileName
{
    NSArray *pathsArr = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docPath = [pathsArr firstObject];
    
    NSString *filePath = [docPath stringByAppendingPathComponent:folder];
    NSFileManager *manager = [NSFileManager defaultManager];
    if (![manager fileExistsAtPath:filePath]) {
        [manager createDirectoryAtPath:filePath withIntermediateDirectories:YES attributes:nil error:nil];
    }
    return [filePath stringByAppendingPathComponent:fileName];
}

+ (void)deleteDocDirectory:(NSString *)folder
{
    NSArray *pathsArr = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    NSString *docPath = [pathsArr firstObject];
    
    NSString *folderPath = [docPath stringByAppendingPathComponent:folder];
    NSFileManager *manager = [NSFileManager defaultManager];
    NSArray *docFiles = [manager contentsOfDirectoryAtPath:folderPath error:nil];
    for (NSString *file in docFiles) {
        if ([manager fileExistsAtPath:file]) {
            [manager removeItemAtPath:file error:nil];
        }
    }
}

+ (void)deleteAllFile{
    NSString *docPath = [[NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES) firstObject] stringByAppendingPathComponent:PAFF_DocFileDirName];
    NSString *tmpPath = [NSTemporaryDirectory() stringByAppendingPathComponent:PAFF_TmpZipDirName];
    
    NSFileManager *manager = [NSFileManager defaultManager];
    NSArray *docFiles = [manager contentsOfDirectoryAtPath:docPath error:nil];
    NSArray *tmpFiles = [manager contentsOfDirectoryAtPath:tmpPath error:nil];
    
    for (NSString *file in docFiles) {
        if ([manager fileExistsAtPath:file]) {
            [manager removeItemAtPath:file error:nil];
        }
    }
    
    for (NSString *file in tmpFiles) {
        if ([manager fileExistsAtPath:file]) {
            [manager removeItemAtPath:file error:nil];
        }
    }
}

+ (NSInteger) countOfFileAtPatn:(NSString *) path
{
    NSFileManager *manager = [NSFileManager defaultManager];
    NSArray *files = [manager contentsOfDirectoryAtPath:path error:nil];
    return [files count];
}

+ (BOOL) createFileWithName:(NSString*) fileName
{
    //建立文件管理
    
    NSFileManager *fm = [NSFileManager defaultManager];
    
    //找到Documents文件所在的路径
    
    NSArray *path = NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);
    
    //取得第一个Documents文件夹的路径
    
    NSString *filePath = [path objectAtIndex:0];
    
    //把TestPlist文件加入
    
    NSString *plistPath = [filePath stringByAppendingPathComponent:fileName];
    
    //开始创建文件
    
    return [fm createFileAtPath:plistPath contents:nil attributes:nil];
}

@end
