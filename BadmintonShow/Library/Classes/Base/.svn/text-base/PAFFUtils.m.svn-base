//
//  BLUtils.m
//  School
//
//  Created by bolei on 15-4-16.
//  Copyright (c) 2015年 BL. All rights reserved.
//

#import "PAFFUtils.h"
#include <sys/socket.h> // Per msqr
#include <sys/sysctl.h>
#include <net/if.h>
#include <net/if_dl.h>
#import <DeviceMacros.h>

//密码正则规则：密码6~30位，至少包含数字、字母和符号中的两种，不能包含€£¥•和空格
#define kPaswordRegex @"^(?=.*[a-zA-Z\\d])(?=.*[a-zA-Z\\W])(?=.*[\\d\\W])[^€£¥•\\ ]{6,30}$"

@implementation PAFFUtils

+ (NSString *)getPhoneMaccAddress
{
    int                    mib[6];
    size_t                len;
    char                *buf;
    unsigned char        *ptr;
    struct if_msghdr    *ifm;
    struct sockaddr_dl    *sdl;
    
    mib[0] = CTL_NET;
    mib[1] = AF_ROUTE;
    mib[2] = 0;
    mib[3] = AF_LINK;
    mib[4] = NET_RT_IFLIST;
    
    if ((mib[5] = if_nametoindex("en0")) == 0) {
//        printf("Error: if_nametoindex error/n");
        return NULL;
    }
    
    if (sysctl(mib, 6, NULL, &len, NULL, 0) < 0) {
//        printf("Error: sysctl, take 1/n");
        return NULL;
    }
    
    if ((buf = malloc(len)) == NULL) {
//        printf("Could not allocate memory. error!/n");
        return NULL;
    }
    
    if (sysctl(mib, 6, buf, &len, NULL, 0) < 0) {
//        printf("Error: sysctl, take 2");
        free(buf);
        return NULL;
    }
    
    ifm = (struct if_msghdr *)buf;
    sdl = (struct sockaddr_dl *)(ifm + 1);
    ptr = (unsigned char *)LLADDR(sdl);
    // NSString *outstring = [NSString stringWithFormat:@"%02x:%02x:%02x:%02x:%02x:%02x", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
    NSString *outstring = [NSString stringWithFormat:@"%02x%02x%02x%02x%02x%02x", *ptr, *(ptr+1), *(ptr+2), *(ptr+3), *(ptr+4), *(ptr+5)];
    free(buf);
    //    NSLog(@"---------%@",[outstring uppercaseString]);
    
    //适配iOS7设备绑定功能
    if ([[[UIDevice currentDevice] systemVersion]intValue]<7) {
        return [outstring uppercaseString];
    }else{
        // edit by zhangjiuxiu FOR:识别设备用不能使用广告标识符
        //return [[[ASIdentifierManager sharedManager] advertisingIdentifier] UUIDString];
        return [[[UIDevice currentDevice] identifierForVendor] UUIDString];
        // edit end
    }
    //    return [outstring uppercaseString];
}

//校验手机号码 详细格式校验
+ (BOOL)checkMobilePhoneNumber:(NSString *)strPhoneNumber {
    if (strPhoneNumber) {
        NSRegularExpression *regularexpression =
        [[NSRegularExpression alloc] initWithPattern:@"^[1][3-8]\\d{9}$"
                                             options:NSRegularExpressionCaseInsensitive
                                               error:nil];
        NSUInteger numberofMatch = [regularexpression numberOfMatchesInString:strPhoneNumber
                                                                      options:NSMatchingReportProgress
                                                                        range:NSMakeRange(0, strPhoneNumber.length)];
        
        if (numberofMatch > 0) {
            return YES;
        }
    }
    
    return NO;
}


+ (UIImage *)compressImage:(UIImage *)image  compressionQuality:(CGFloat)compressionQuality{
    
    if (!image) {
        return nil;
    }
    
    CGFloat widthScale = PAFF_ScreenWidth * PAFF_ScreenScale / image.size.width;
    CGFloat heightScale = PAFF_ScreenHeight * PAFF_ScreenScale / image.size.height;
    CGFloat scale = MIN(widthScale, heightScale);
    UIImage *scaledImage = nil;
    if (scale > 1) {
        scaledImage = image;
    } else {
        CGSize scaledSize = CGSizeMake(image.size.width * scale, image.size.height * scale);
        UIGraphicsBeginImageContext(scaledSize);
        [image drawInRect:CGRectMake(0, 0, scaledSize.width, scaledSize.height)];
        scaledImage = UIGraphicsGetImageFromCurrentImageContext();
        UIGraphicsEndImageContext();
    }
    
    NSData * imageData = UIImageJPEGRepresentation(scaledImage, compressionQuality);
    
    return [UIImage imageWithData:imageData];
}

+ (BOOL)isPasswordValid:(NSString *)password{
    NSPredicate *predicate = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", kPaswordRegex];
    if (![predicate evaluateWithObject:password]){
        return NO;
    }
    return YES;
}

@end
